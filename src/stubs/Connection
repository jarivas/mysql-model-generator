<?php declare(strict_types=1);

namespace {{namespace}};

use Exception;
use PDO;

class Connection {
    private $host = '{{host}}';
    private $dbname = '{{dbname}}';
    private $username = '{{username}}';
    private $password = '{{password}}';
    private $db = null;
    private static $instance = null;

    public static function getInstance() : ?Connection
    {
        if (self::$instance == null) self::$instance = new self();

        return self::$instance;
    }

    private function __construct()
    {
        $this->db = new PDO("mysql:host={$this->host};dbname={$this->dbname}", $this->username, $this->password);
    }

    public function get(string $sql, ?array $params, string $className)
    {
        $stmt = $this->db->prepare($sql);
        
        if ($stmt->execute($params)) {
            return $stmt->fetchAll(PDO::FETCH_CLASS, $className);
        } else {
            throw new Exception($sql.' ' .implode(', ', $stmt->errorInfo()));
        }
    }

    public function executeSql(string $sql, ?array $params = null)
    {
        $stmt = $this->db->prepare($sql);

        if (!$stmt->execute($params)) {
            throw new Exception($sql.' ' .implode(', ', $stmt->errorInfo()));
        }
    }

    public function exec(string $sql)
    {
        if (!$this->db->exec($sql)) {
            $error = $this->db->errorInfo();

            if ($error[0] != "00000") {
                throw new Exception($sql.' ' .implode(', ', $error));
            }
        }
    }

    public function lastInsertId(): ?string
    {
        return $this->db->lastInsertId();
    }
}